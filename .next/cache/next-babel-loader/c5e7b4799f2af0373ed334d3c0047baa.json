{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/andres/Projects/podcasts-nextjs/pages/channel.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport 'isomorphic-fetch';\n\nvar Channel = function Channel(props) {\n  var channel = props.channel;\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, __jsx(\"header\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }\n  }, \"Podcasts\"), __jsx(\"div\", {\n    className: \"banner\",\n    style: {\n      backgroundImage: \"url(\".concat(channel.urls.banner_image.original, \")\")\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }\n  }), __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, channel.title), series.length > 0 && __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 11\n    }\n  }, \"Series\"), __jsx(\"div\", {\n    className: \"channels\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }\n  }, series.map(function (serie) {\n    return __jsx(Link, {\n      href: \"/channel?id=\".concat(serie.id),\n      prefetch: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 15\n      }\n    }, __jsx(\"a\", {\n      className: \"channel\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }\n    }, __jsx(\"img\", {\n      src: serie.urls.logo_image.original,\n      alt: \"\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 19\n      }\n    }), __jsx(\"h2\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 19\n      }\n    }, serie.title)));\n  }))), __jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, \"Ultimos Podcasts\"), audioClips.map(function (clip) {\n    return __jsx(\"div\", {\n      className: \"podcast\",\n      key: clip.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }, clip.title);\n  }));\n};\n\n__jsx(\"style\", {\n  jsx: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 1\n  }\n}, \"\\n  header {\\n    color: #fff;\\n    background: #8756ca;\\n    padding: 15px;\\n    text-align: center;\\n  }\\n  .channels {\\n    display: grid;\\n    grid-gap: 15px;\\n    padding: 15px;\\n    grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));\\n  }\\n  a.channel {\\n    display: block;\\n    margin-bottom: 0.5em;\\n    color: #333;\\n    text-decoration: none;\\n  }\\n  .channel img {\\n    border-radius: 3px;\\n    box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.15);\\n    width: 100%;\\n  }\\n  h1 {\\n    font-weight: 600;\\n    padding: 15px;\\n  }\\n  h2 {\\n    padding: 5px;\\n    font-size: 0.9em;\\n    font-weight: 600;\\n    margin: 0;\\n    text-align: center;\\n  }\\n\");\n\nChannel.getInitialProps = function _callee(_ref) {\n  var query, idChannel, _await$Promise$all, _await$Promise$all2, reqChannel, reqSeries, reqAudios, dataChannel, channel, dataAudios, audioClips, dataSeries, series;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref.query;\n          idChannel = query.id;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(Promise.all([fetch(\"https://api.audioboom.com/channels/\".concat(idChannel)), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/child_channels\")), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/audio_clips\"))]));\n\n        case 4:\n          _await$Promise$all = _context.sent;\n          _await$Promise$all2 = _slicedToArray(_await$Promise$all, 3);\n          reqChannel = _await$Promise$all2[0];\n          reqSeries = _await$Promise$all2[1];\n          reqAudios = _await$Promise$all2[2];\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(reqChannel.json());\n\n        case 11:\n          dataChannel = _context.sent;\n          channel = dataChannel.body.channel;\n          _context.next = 15;\n          return _regeneratorRuntime.awrap(reqAudios.json());\n\n        case 15:\n          dataAudios = _context.sent;\n          audioClips = dataAudios.body.audio_clips;\n          _context.next = 19;\n          return _regeneratorRuntime.awrap(reqSeries.json());\n\n        case 19:\n          dataSeries = _context.sent;\n          series = dataSeries.body.channels;\n          return _context.abrupt(\"return\", {\n            channel: channel,\n            audioClips: audioClips,\n            series: series\n          });\n\n        case 22:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Channel;","map":{"version":3,"sources":["/home/andres/Projects/podcasts-nextjs/pages/channel.js"],"names":["Channel","props","channel","backgroundImage","urls","banner_image","original","title","series","length","map","serie","id","logo_image","audioClips","clip","getInitialProps","query","idChannel","Promise","all","fetch","reqChannel","reqSeries","reqAudios","json","dataChannel","body","dataAudios","audio_clips","dataSeries","channels"],"mappings":"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","sourcesContent":["import 'isomorphic-fetch';\n\nconst Channel = (props) => {\n  const { channel } = props;\n  return (\n    <div>\n      <header>Podcasts</header>\n\n      <div\n        className='banner'\n        style={{\n          backgroundImage: `url(${channel.urls.banner_image.original})`,\n        }}\n      />\n\n      <h1>{channel.title}</h1>\n\n      {series.length > 0 && (\n        <div>\n          <h2>Series</h2>\n          <div className='channels'>\n            {series.map((serie) => (\n              <Link href={`/channel?id=${serie.id}`} prefetch>\n                <a className='channel'>\n                  <img src={serie.urls.logo_image.original} alt='' />\n                  <h2>{serie.title}</h2>\n                </a>\n              </Link>\n            ))}\n          </div>\n        </div>\n      )}\n\n      <h2>Ultimos Podcasts</h2>\n      {audioClips.map((clip) => (\n        <div className='podcast' key={clip.id}>\n          {clip.title}\n        </div>\n      ))}\n    </div>\n  );\n};\n\n<style jsx>{`\n  header {\n    color: #fff;\n    background: #8756ca;\n    padding: 15px;\n    text-align: center;\n  }\n  .channels {\n    display: grid;\n    grid-gap: 15px;\n    padding: 15px;\n    grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));\n  }\n  a.channel {\n    display: block;\n    margin-bottom: 0.5em;\n    color: #333;\n    text-decoration: none;\n  }\n  .channel img {\n    border-radius: 3px;\n    box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.15);\n    width: 100%;\n  }\n  h1 {\n    font-weight: 600;\n    padding: 15px;\n  }\n  h2 {\n    padding: 5px;\n    font-size: 0.9em;\n    font-weight: 600;\n    margin: 0;\n    text-align: center;\n  }\n`}</style>;\n\nChannel.getInitialProps = async ({ query }) => {\n  let idChannel = query.id;\n  let [reqChannel, reqSeries, reqAudios] = await Promise.all([\n    fetch(`https://api.audioboom.com/channels/${idChannel}`),\n    fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`),\n    fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`),\n  ]);\n\n  let dataChannel = await reqChannel.json();\n  let channel = dataChannel.body.channel;\n\n  let dataAudios = await reqAudios.json();\n  let audioClips = dataAudios.body.audio_clips;\n\n  let dataSeries = await reqSeries.json();\n  let series = dataSeries.body.channels;\n\n  return { channel, audioClips, series };\n};\n\nexport default Channel;\n"]},"metadata":{},"sourceType":"module"}