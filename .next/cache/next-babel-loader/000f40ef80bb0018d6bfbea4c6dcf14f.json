{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport 'isomorphic-fetch';\nimport React, { useState } from 'react';\nimport Error from './_error';\nimport Layout from '../components/Layout';\nimport ChannelGrid from '../components/ChannelGrid';\nimport PodcastList from '../components/PodcastList';\n\nconst Channel = props => {\n  const {\n    channel,\n    audioClips,\n    series,\n    statusCode\n  } = props;\n  const {\n    0: podcast,\n    1: setPodcast\n  } = useState(null);\n\n  const openPodcast = (event, podcast) => {\n    event.preventDefault();\n    setPodcast(podcast);\n  };\n\n  if (statusCode !== 200) {\n    return __jsx(Error, {\n      statusCode: statusCode\n    });\n  }\n\n  openPodcast();\n  return __jsx(Layout, {\n    title: channel.title\n  }, __jsx(\"div\", {\n    style: {\n      backgroundImage: `url(${channel.urls.banner_image.original})`\n    },\n    className: \"jsx-1404733386\" + \" \" + \"banner\"\n  }), podcast && __jsx(\"div\", {\n    className: \"jsx-1404733386\"\n  }, \"Podcast\"), __jsx(\"h1\", {\n    className: \"jsx-1404733386\"\n  }, channel.title), series.length > 0 && __jsx(\"div\", {\n    className: \"jsx-1404733386\"\n  }, __jsx(\"h2\", {\n    className: \"jsx-1404733386\"\n  }, \"Series\"), __jsx(ChannelGrid, {\n    channels: series\n  })), __jsx(\"h2\", {\n    className: \"jsx-1404733386\"\n  }, \"Ultimos Podcasts\"), __jsx(PodcastList, {\n    podcasts: audioClips\n  }), __jsx(_JSXStyle, {\n    id: \"1404733386\"\n  }, \".banner.jsx-1404733386{width:100%;padding-bottom:25%;background-position:50% 50%;background-size:cover;background-color:#aaa;}h1.jsx-1404733386{font-weight:600;padding:15px;}h2.jsx-1404733386{padding:15px;font-size:1.2em;font-weight:600;margin:0;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FuZHJlcy9Qcm9qZWN0cy9wb2RjYXN0cy1uZXh0anMvcGFnZXMvY2hhbm5lbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4Q2tCLEFBR3NCLEFBT0ssQUFJSCxXQVZNLEVBV0gsR0FKSCxhQUNmLEFBSWtCLENBWFksZUFZbkIsU0FDWCxJQVp3QixzQkFDQSxzQkFDeEIiLCJmaWxlIjoiL2hvbWUvYW5kcmVzL1Byb2plY3RzL3BvZGNhc3RzLW5leHRqcy9wYWdlcy9jaGFubmVsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdpc29tb3JwaGljLWZldGNoJztcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IEVycm9yIGZyb20gJy4vX2Vycm9yJztcbmltcG9ydCBMYXlvdXQgZnJvbSAnLi4vY29tcG9uZW50cy9MYXlvdXQnO1xuaW1wb3J0IENoYW5uZWxHcmlkIGZyb20gJy4uL2NvbXBvbmVudHMvQ2hhbm5lbEdyaWQnO1xuaW1wb3J0IFBvZGNhc3RMaXN0IGZyb20gJy4uL2NvbXBvbmVudHMvUG9kY2FzdExpc3QnO1xuXG5jb25zdCBDaGFubmVsID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgY2hhbm5lbCwgYXVkaW9DbGlwcywgc2VyaWVzLCBzdGF0dXNDb2RlIH0gPSBwcm9wcztcbiAgY29uc3QgW3BvZGNhc3QsIHNldFBvZGNhc3RdID0gdXNlU3RhdGUobnVsbCk7XG5cbiAgY29uc3Qgb3BlblBvZGNhc3QgPSAoZXZlbnQsIHBvZGNhc3QpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHNldFBvZGNhc3QocG9kY2FzdCk7XG4gIH07XG5cbiAgaWYgKHN0YXR1c0NvZGUgIT09IDIwMCkge1xuICAgIHJldHVybiA8RXJyb3Igc3RhdHVzQ29kZT17c3RhdHVzQ29kZX0gLz47XG4gIH1cblxuICBvcGVuUG9kY2FzdCgpO1xuXG4gIHJldHVybiAoXG4gICAgPExheW91dCB0aXRsZT17Y2hhbm5lbC50aXRsZX0+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT1cImJhbm5lclwiXG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7Y2hhbm5lbC51cmxzLmJhbm5lcl9pbWFnZS5vcmlnaW5hbH0pYCxcbiAgICAgICAgfX1cbiAgICAgIC8+XG5cbiAgICAgIHtwb2RjYXN0ICYmIDxkaXY+UG9kY2FzdDwvZGl2Pn1cblxuICAgICAgPGgxPntjaGFubmVsLnRpdGxlfTwvaDE+XG5cbiAgICAgIHtzZXJpZXMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGgyPlNlcmllczwvaDI+XG4gICAgICAgICAgPENoYW5uZWxHcmlkIGNoYW5uZWxzPXtzZXJpZXN9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cblxuICAgICAgPGgyPlVsdGltb3MgUG9kY2FzdHM8L2gyPlxuICAgICAgPFBvZGNhc3RMaXN0IHBvZGNhc3RzPXthdWRpb0NsaXBzfSAvPlxuXG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIC5iYW5uZXIge1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAyNSU7XG4gICAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogNTAlIDUwJTtcbiAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNhYWE7XG4gICAgICAgIH1cbiAgICAgICAgaDEge1xuICAgICAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgICAgICAgcGFkZGluZzogMTVweDtcbiAgICAgICAgfVxuICAgICAgICBoMiB7XG4gICAgICAgICAgcGFkZGluZzogMTVweDtcbiAgICAgICAgICBmb250LXNpemU6IDEuMmVtO1xuICAgICAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9MYXlvdXQ+XG4gICk7XG59O1xuXG5DaGFubmVsLmdldEluaXRpYWxQcm9wcyA9IGFzeW5jICh7IHF1ZXJ5LCByZXMgfSkgPT4ge1xuICBsZXQgaWRDaGFubmVsID0gcXVlcnkuaWQ7XG5cbiAgdHJ5IHtcbiAgICBsZXQgW3JlcUNoYW5uZWwsIHJlcVNlcmllcywgcmVxQXVkaW9zXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIGZldGNoKGBodHRwczovL2FwaS5hdWRpb2Jvb20uY29tL2NoYW5uZWxzLyR7aWRDaGFubmVsfWApLFxuICAgICAgZmV0Y2goYGh0dHBzOi8vYXBpLmF1ZGlvYm9vbS5jb20vY2hhbm5lbHMvJHtpZENoYW5uZWx9L2NoaWxkX2NoYW5uZWxzYCksXG4gICAgICBmZXRjaChgaHR0cHM6Ly9hcGkuYXVkaW9ib29tLmNvbS9jaGFubmVscy8ke2lkQ2hhbm5lbH0vYXVkaW9fY2xpcHNgKSxcbiAgICBdKTtcblxuICAgIGlmIChyZXFDaGFubmVsLnN0YXR1cyA+PSA0MDQpIHtcbiAgICAgIHJlcy5zdGF0dXNDb2RlID0gcmVxQ2hhbm5lbC5zdGF0dXM7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNoYW5uZWw6IG51bGwsXG4gICAgICAgIGF1ZGlvQ2xpcHM6IG51bGwsXG4gICAgICAgIHNlcmllczogbnVsbCxcbiAgICAgICAgc3RhdHVzQ29kZTogcmVxQ2hhbm5lbC5zdGF0dXMsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGxldCBkYXRhQ2hhbm5lbCA9IGF3YWl0IHJlcUNoYW5uZWwuanNvbigpO1xuICAgIGxldCBjaGFubmVsID0gZGF0YUNoYW5uZWwuYm9keS5jaGFubmVsO1xuXG4gICAgbGV0IGRhdGFBdWRpb3MgPSBhd2FpdCByZXFBdWRpb3MuanNvbigpO1xuICAgIGxldCBhdWRpb0NsaXBzID0gZGF0YUF1ZGlvcy5ib2R5LmF1ZGlvX2NsaXBzO1xuXG4gICAgbGV0IGRhdGFTZXJpZXMgPSBhd2FpdCByZXFTZXJpZXMuanNvbigpO1xuICAgIGxldCBzZXJpZXMgPSBkYXRhU2VyaWVzLmJvZHkuY2hhbm5lbHM7XG5cbiAgICByZXR1cm4geyBjaGFubmVsLCBhdWRpb0NsaXBzLCBzZXJpZXMsIHN0YXR1c0NvZGU6IDIwMCB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7IGNoYW5uZWw6IG51bGwsIGF1ZGlvQ2xpcHM6IG51bGwsIHNlcmllczogbnVsbCwgc3RhdHVzQ29kZTogNTAzIH07XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENoYW5uZWw7XG4iXX0= */\\n/*@ sourceURL=/home/andres/Projects/podcasts-nextjs/pages/channel.js */\"));\n};\n\nChannel.getInitialProps = async ({\n  query,\n  res\n}) => {\n  let idChannel = query.id;\n\n  try {\n    let [reqChannel, reqSeries, reqAudios] = await Promise.all([fetch(`https://api.audioboom.com/channels/${idChannel}`), fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`), fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`)]);\n\n    if (reqChannel.status >= 404) {\n      res.statusCode = reqChannel.status;\n      return {\n        channel: null,\n        audioClips: null,\n        series: null,\n        statusCode: reqChannel.status\n      };\n    }\n\n    let dataChannel = await reqChannel.json();\n    let channel = dataChannel.body.channel;\n    let dataAudios = await reqAudios.json();\n    let audioClips = dataAudios.body.audio_clips;\n    let dataSeries = await reqSeries.json();\n    let series = dataSeries.body.channels;\n    return {\n      channel,\n      audioClips,\n      series,\n      statusCode: 200\n    };\n  } catch (error) {\n    return {\n      channel: null,\n      audioClips: null,\n      series: null,\n      statusCode: 503\n    };\n  }\n};\n\nexport default Channel;","map":{"version":3,"sources":["/home/andres/Projects/podcasts-nextjs/pages/channel.js"],"names":["React","useState","Error","Layout","ChannelGrid","PodcastList","Channel","props","channel","audioClips","series","statusCode","podcast","setPodcast","openPodcast","event","preventDefault","title","backgroundImage","urls","banner_image","original","length","getInitialProps","query","res","idChannel","id","reqChannel","reqSeries","reqAudios","Promise","all","fetch","status","dataChannel","json","body","dataAudios","audio_clips","dataSeries","channels","error"],"mappings":"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","sourcesContent":["import 'isomorphic-fetch';\nimport React, { useState } from 'react';\n\nimport Error from './_error';\nimport Layout from '../components/Layout';\nimport ChannelGrid from '../components/ChannelGrid';\nimport PodcastList from '../components/PodcastList';\n\nconst Channel = (props) => {\n  const { channel, audioClips, series, statusCode } = props;\n  const [podcast, setPodcast] = useState(null);\n\n  const openPodcast = (event, podcast) => {\n    event.preventDefault();\n    setPodcast(podcast);\n  };\n\n  if (statusCode !== 200) {\n    return <Error statusCode={statusCode} />;\n  }\n\n  openPodcast();\n\n  return (\n    <Layout title={channel.title}>\n      <div\n        className=\"banner\"\n        style={{\n          backgroundImage: `url(${channel.urls.banner_image.original})`,\n        }}\n      />\n\n      {podcast && <div>Podcast</div>}\n\n      <h1>{channel.title}</h1>\n\n      {series.length > 0 && (\n        <div>\n          <h2>Series</h2>\n          <ChannelGrid channels={series} />\n        </div>\n      )}\n\n      <h2>Ultimos Podcasts</h2>\n      <PodcastList podcasts={audioClips} />\n\n      <style jsx>{`\n        .banner {\n          width: 100%;\n          padding-bottom: 25%;\n          background-position: 50% 50%;\n          background-size: cover;\n          background-color: #aaa;\n        }\n        h1 {\n          font-weight: 600;\n          padding: 15px;\n        }\n        h2 {\n          padding: 15px;\n          font-size: 1.2em;\n          font-weight: 600;\n          margin: 0;\n        }\n      `}</style>\n    </Layout>\n  );\n};\n\nChannel.getInitialProps = async ({ query, res }) => {\n  let idChannel = query.id;\n\n  try {\n    let [reqChannel, reqSeries, reqAudios] = await Promise.all([\n      fetch(`https://api.audioboom.com/channels/${idChannel}`),\n      fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`),\n      fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`),\n    ]);\n\n    if (reqChannel.status >= 404) {\n      res.statusCode = reqChannel.status;\n\n      return {\n        channel: null,\n        audioClips: null,\n        series: null,\n        statusCode: reqChannel.status,\n      };\n    }\n\n    let dataChannel = await reqChannel.json();\n    let channel = dataChannel.body.channel;\n\n    let dataAudios = await reqAudios.json();\n    let audioClips = dataAudios.body.audio_clips;\n\n    let dataSeries = await reqSeries.json();\n    let series = dataSeries.body.channels;\n\n    return { channel, audioClips, series, statusCode: 200 };\n  } catch (error) {\n    return { channel: null, audioClips: null, series: null, statusCode: 503 };\n  }\n};\n\nexport default Channel;\n"]},"metadata":{},"sourceType":"module"}