{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/andres/Projects/podcasts-nextjs/pages/channel.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport 'isomorphic-fetch';\n\nvar Channel = function Channel(props) {\n  var channel = props.channel;\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, __jsx(\"header\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }\n  }, \"Podcasts\"), __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, channel.title));\n};\n\n__jsx(\"style\", {\n  jsx: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 1\n  }\n}, \"\\n  header {\\n    color: #fff;\\n    background: #8756ca;\\n    padding: 15px;\\n    text-align: center;\\n  }\\n  .channels {\\n    display: grid;\\n    grid-gap: 15px;\\n    padding: 15px;\\n    grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));\\n  }\\n  a.channel {\\n    display: block;\\n    margin-bottom: 0.5em;\\n    color: #333;\\n    text-decoration: none;\\n  }\\n  .channel img {\\n    border-radius: 3px;\\n    box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.15);\\n    width: 100%;\\n  }\\n  h1 {\\n    font-weight: 600;\\n    padding: 15px;\\n  }\\n  h2 {\\n    padding: 5px;\\n    font-size: 0.9em;\\n    font-weight: 600;\\n    margin: 0;\\n    text-align: center;\\n  }\\n\");\n\nChannel.getInitialProps = function _callee(_ref) {\n  var query, idChannel, _await$Promise$all, _await$Promise$all2, reqChannel, reqSeries, reqAudios, dataChannel, channel, dataAudios, audioClips, dataSeries, series;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref.query;\n          idChannel = query.id;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(Promise.all([fetch(\"https://api.audioboom.com/channels/\".concat(idChannel)), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/child_channels\")), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/audio_clips\"))]));\n\n        case 4:\n          _await$Promise$all = _context.sent;\n          _await$Promise$all2 = _slicedToArray(_await$Promise$all, 3);\n          reqChannel = _await$Promise$all2[0];\n          reqSeries = _await$Promise$all2[1];\n          reqAudios = _await$Promise$all2[2];\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(reqChannel.json());\n\n        case 11:\n          dataChannel = _context.sent;\n          channel = dataChannel.body.channel;\n          _context.next = 15;\n          return _regeneratorRuntime.awrap(reqAudios.json());\n\n        case 15:\n          dataAudios = _context.sent;\n          audioClips = dataAudios.body.audio_clips;\n          _context.next = 19;\n          return _regeneratorRuntime.awrap(reqSeries.json());\n\n        case 19:\n          dataSeries = _context.sent;\n          series = dataSeries.body.channels;\n          return _context.abrupt(\"return\", {\n            channel: channel,\n            audioClips: audioClips,\n            series: series\n          });\n\n        case 22:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Channel;","map":{"version":3,"sources":["/home/andres/Projects/podcasts-nextjs/pages/channel.js"],"names":["Channel","props","channel","title","getInitialProps","query","idChannel","id","Promise","all","fetch","reqChannel","reqSeries","reqAudios","json","dataChannel","body","dataAudios","audioClips","audio_clips","dataSeries","series","channels"],"mappings":";;;;;;;;AAAA,OAAO,kBAAP;;AAEA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AAAA,MACjBC,OADiB,GACLD,KADK,CACjBC,OADiB;AAEzB,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,OAAO,CAACC,KAAb,CAFF,CADF;AAMD,CARD;;AAUA;AAAO,EAAA,GAAG,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqCAH,OAAO,CAACI,eAAR,GAA0B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,KAAT,QAASA,KAAT;AACpBC,UAAAA,SADoB,GACRD,KAAK,CAACE,EADE;AAAA;AAAA,2CAEuBC,OAAO,CAACC,GAAR,CAAY,CACzDC,KAAK,8CAAuCJ,SAAvC,EADoD,EAEzDI,KAAK,8CAAuCJ,SAAvC,qBAFoD,EAGzDI,KAAK,8CAAuCJ,SAAvC,kBAHoD,CAAZ,CAFvB;;AAAA;AAAA;AAAA;AAEnBK,UAAAA,UAFmB;AAEPC,UAAAA,SAFO;AAEIC,UAAAA,SAFJ;AAAA;AAAA,2CAQAF,UAAU,CAACG,IAAX,EARA;;AAAA;AAQpBC,UAAAA,WARoB;AASpBb,UAAAA,OAToB,GASVa,WAAW,CAACC,IAAZ,CAAiBd,OATP;AAAA;AAAA,2CAWDW,SAAS,CAACC,IAAV,EAXC;;AAAA;AAWpBG,UAAAA,UAXoB;AAYpBC,UAAAA,UAZoB,GAYPD,UAAU,CAACD,IAAX,CAAgBG,WAZT;AAAA;AAAA,2CAcDP,SAAS,CAACE,IAAV,EAdC;;AAAA;AAcpBM,UAAAA,UAdoB;AAepBC,UAAAA,MAfoB,GAeXD,UAAU,CAACJ,IAAX,CAAgBM,QAfL;AAAA,2CAiBjB;AAAEpB,YAAAA,OAAO,EAAPA,OAAF;AAAWgB,YAAAA,UAAU,EAAVA,UAAX;AAAuBG,YAAAA,MAAM,EAANA;AAAvB,WAjBiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;;AAoBA,eAAerB,OAAf","sourcesContent":["import 'isomorphic-fetch';\n\nconst Channel = (props) => {\n  const { channel } = props;\n  return (\n    <div>\n      <header>Podcasts</header>\n      <h1>{channel.title}</h1>\n    </div>\n  );\n};\n\n<style jsx>{`\n  header {\n    color: #fff;\n    background: #8756ca;\n    padding: 15px;\n    text-align: center;\n  }\n  .channels {\n    display: grid;\n    grid-gap: 15px;\n    padding: 15px;\n    grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));\n  }\n  a.channel {\n    display: block;\n    margin-bottom: 0.5em;\n    color: #333;\n    text-decoration: none;\n  }\n  .channel img {\n    border-radius: 3px;\n    box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.15);\n    width: 100%;\n  }\n  h1 {\n    font-weight: 600;\n    padding: 15px;\n  }\n  h2 {\n    padding: 5px;\n    font-size: 0.9em;\n    font-weight: 600;\n    margin: 0;\n    text-align: center;\n  }\n`}</style>;\n\nChannel.getInitialProps = async ({ query }) => {\n  let idChannel = query.id;\n  let [reqChannel, reqSeries, reqAudios] = await Promise.all([\n    fetch(`https://api.audioboom.com/channels/${idChannel}`),\n    fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`),\n    fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`),\n  ]);\n\n  let dataChannel = await reqChannel.json();\n  let channel = dataChannel.body.channel;\n\n  let dataAudios = await reqAudios.json();\n  let audioClips = dataAudios.body.audio_clips;\n\n  let dataSeries = await reqSeries.json();\n  let series = dataSeries.body.channels;\n\n  return { channel, audioClips, series };\n};\n\nexport default Channel;\n"]},"metadata":{},"sourceType":"module"}