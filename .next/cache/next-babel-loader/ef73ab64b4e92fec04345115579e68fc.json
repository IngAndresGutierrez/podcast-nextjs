{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport 'isomorphic-fetch';\nimport React, { useState } from 'react';\nimport Error from './_error';\nimport Layout from '../components/Layout';\nimport ChannelGrid from '../components/ChannelGrid';\nimport PodcastList from '../components/PodcastList';\n\nvar Channel = function Channel(props) {\n  var channel = props.channel,\n      audioClips = props.audioClips,\n      series = props.series,\n      statusCode = props.statusCode;\n\n  var _useState = useState(null),\n      podcast = _useState[0],\n      setPodcast = _useState[1];\n\n  openPodcast = function openPodcast(event, podcast) {\n    event.preventDefault();\n    setPodcast(podcast);\n  };\n\n  if (statusCode !== 200) {\n    return __jsx(Error, {\n      statusCode: statusCode\n    });\n  }\n\n  return __jsx(Layout, {\n    title: channel.title\n  }, __jsx(\"div\", {\n    style: {\n      backgroundImage: \"url(\".concat(channel.urls.banner_image.original, \")\")\n    },\n    className: \"jsx-1404733386\" + \" \" + \"banner\"\n  }), __jsx(\"h1\", {\n    className: \"jsx-1404733386\"\n  }, channel.title), series.length > 0 && __jsx(\"div\", {\n    className: \"jsx-1404733386\"\n  }, __jsx(\"h2\", {\n    className: \"jsx-1404733386\"\n  }, \"Series\"), __jsx(ChannelGrid, {\n    channels: series\n  })), __jsx(\"h2\", {\n    className: \"jsx-1404733386\"\n  }, \"Ultimos Podcasts\"), __jsx(PodcastList, {\n    podcasts: audioClips\n  }), __jsx(_JSXStyle, {\n    id: \"1404733386\"\n  }, \".banner.jsx-1404733386{width:100%;padding-bottom:25%;background-position:50% 50%;background-size:cover;background-color:#aaa;}h1.jsx-1404733386{font-weight:600;padding:15px;}h2.jsx-1404733386{padding:15px;font-size:1.2em;font-weight:600;margin:0;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FuZHJlcy9Qcm9qZWN0cy9wb2RjYXN0cy1uZXh0anMvcGFnZXMvY2hhbm5lbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEyQ2tCLEFBR3NCLEFBT0ssQUFJSCxXQVZNLEVBV0gsR0FKSCxhQUNmLEFBSWtCLENBWFksZUFZbkIsU0FDWCxJQVp3QixzQkFDQSxzQkFDeEIiLCJmaWxlIjoiL2hvbWUvYW5kcmVzL1Byb2plY3RzL3BvZGNhc3RzLW5leHRqcy9wYWdlcy9jaGFubmVsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdpc29tb3JwaGljLWZldGNoJztcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IEVycm9yIGZyb20gJy4vX2Vycm9yJztcbmltcG9ydCBMYXlvdXQgZnJvbSAnLi4vY29tcG9uZW50cy9MYXlvdXQnO1xuaW1wb3J0IENoYW5uZWxHcmlkIGZyb20gJy4uL2NvbXBvbmVudHMvQ2hhbm5lbEdyaWQnO1xuaW1wb3J0IFBvZGNhc3RMaXN0IGZyb20gJy4uL2NvbXBvbmVudHMvUG9kY2FzdExpc3QnO1xuXG5jb25zdCBDaGFubmVsID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgY2hhbm5lbCwgYXVkaW9DbGlwcywgc2VyaWVzLCBzdGF0dXNDb2RlIH0gPSBwcm9wcztcblxuICBjb25zdCBbcG9kY2FzdCwgc2V0UG9kY2FzdF0gPSB1c2VTdGF0ZShudWxsKTtcblxuICBvcGVuUG9kY2FzdCA9IChldmVudCwgcG9kY2FzdCkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgc2V0UG9kY2FzdChwb2RjYXN0KTtcbiAgfTtcblxuICBpZiAoc3RhdHVzQ29kZSAhPT0gMjAwKSB7XG4gICAgcmV0dXJuIDxFcnJvciBzdGF0dXNDb2RlPXtzdGF0dXNDb2RlfSAvPjtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPExheW91dCB0aXRsZT17Y2hhbm5lbC50aXRsZX0+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT1cImJhbm5lclwiXG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7Y2hhbm5lbC51cmxzLmJhbm5lcl9pbWFnZS5vcmlnaW5hbH0pYCxcbiAgICAgICAgfX1cbiAgICAgIC8+XG5cbiAgICAgIDxoMT57Y2hhbm5lbC50aXRsZX08L2gxPlxuXG4gICAgICB7c2VyaWVzLmxlbmd0aCA+IDAgJiYgKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxoMj5TZXJpZXM8L2gyPlxuICAgICAgICAgIDxDaGFubmVsR3JpZCBjaGFubmVscz17c2VyaWVzfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG5cbiAgICAgIDxoMj5VbHRpbW9zIFBvZGNhc3RzPC9oMj5cbiAgICAgIDxQb2RjYXN0TGlzdCBwb2RjYXN0cz17YXVkaW9DbGlwc30gLz5cblxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAuYmFubmVyIHtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMjUlO1xuICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDUwJSA1MCU7XG4gICAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYWFhO1xuICAgICAgICB9XG4gICAgICAgIGgxIHtcbiAgICAgICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgICAgIHBhZGRpbmc6IDE1cHg7XG4gICAgICAgIH1cbiAgICAgICAgaDIge1xuICAgICAgICAgIHBhZGRpbmc6IDE1cHg7XG4gICAgICAgICAgZm9udC1zaXplOiAxLjJlbTtcbiAgICAgICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgfVxuICAgICAgYH08L3N0eWxlPlxuICAgIDwvTGF5b3V0PlxuICApO1xufTtcblxuQ2hhbm5lbC5nZXRJbml0aWFsUHJvcHMgPSBhc3luYyAoeyBxdWVyeSwgcmVzIH0pID0+IHtcbiAgbGV0IGlkQ2hhbm5lbCA9IHF1ZXJ5LmlkO1xuXG4gIHRyeSB7XG4gICAgbGV0IFtyZXFDaGFubmVsLCByZXFTZXJpZXMsIHJlcUF1ZGlvc10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICBmZXRjaChgaHR0cHM6Ly9hcGkuYXVkaW9ib29tLmNvbS9jaGFubmVscy8ke2lkQ2hhbm5lbH1gKSxcbiAgICAgIGZldGNoKGBodHRwczovL2FwaS5hdWRpb2Jvb20uY29tL2NoYW5uZWxzLyR7aWRDaGFubmVsfS9jaGlsZF9jaGFubmVsc2ApLFxuICAgICAgZmV0Y2goYGh0dHBzOi8vYXBpLmF1ZGlvYm9vbS5jb20vY2hhbm5lbHMvJHtpZENoYW5uZWx9L2F1ZGlvX2NsaXBzYCksXG4gICAgXSk7XG5cbiAgICBpZiAocmVxQ2hhbm5lbC5zdGF0dXMgPj0gNDA0KSB7XG4gICAgICByZXMuc3RhdHVzQ29kZSA9IHJlcUNoYW5uZWwuc3RhdHVzO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjaGFubmVsOiBudWxsLFxuICAgICAgICBhdWRpb0NsaXBzOiBudWxsLFxuICAgICAgICBzZXJpZXM6IG51bGwsXG4gICAgICAgIHN0YXR1c0NvZGU6IHJlcUNoYW5uZWwuc3RhdHVzLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBsZXQgZGF0YUNoYW5uZWwgPSBhd2FpdCByZXFDaGFubmVsLmpzb24oKTtcbiAgICBsZXQgY2hhbm5lbCA9IGRhdGFDaGFubmVsLmJvZHkuY2hhbm5lbDtcblxuICAgIGxldCBkYXRhQXVkaW9zID0gYXdhaXQgcmVxQXVkaW9zLmpzb24oKTtcbiAgICBsZXQgYXVkaW9DbGlwcyA9IGRhdGFBdWRpb3MuYm9keS5hdWRpb19jbGlwcztcblxuICAgIGxldCBkYXRhU2VyaWVzID0gYXdhaXQgcmVxU2VyaWVzLmpzb24oKTtcbiAgICBsZXQgc2VyaWVzID0gZGF0YVNlcmllcy5ib2R5LmNoYW5uZWxzO1xuXG4gICAgcmV0dXJuIHsgY2hhbm5lbCwgYXVkaW9DbGlwcywgc2VyaWVzLCBzdGF0dXNDb2RlOiAyMDAgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBjaGFubmVsOiBudWxsLCBhdWRpb0NsaXBzOiBudWxsLCBzZXJpZXM6IG51bGwsIHN0YXR1c0NvZGU6IDUwMyB9O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDaGFubmVsO1xuIl19 */\\n/*@ sourceURL=/home/andres/Projects/podcasts-nextjs/pages/channel.js */\"));\n};\n\nChannel.getInitialProps = function _callee(_ref) {\n  var query, res, idChannel, _await$Promise$all, _await$Promise$all2, reqChannel, reqSeries, reqAudios, dataChannel, channel, dataAudios, audioClips, dataSeries, series;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref.query, res = _ref.res;\n          idChannel = query.id;\n          _context.prev = 2;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(Promise.all([fetch(\"https://api.audioboom.com/channels/\".concat(idChannel)), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/child_channels\")), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/audio_clips\"))]));\n\n        case 5:\n          _await$Promise$all = _context.sent;\n          _await$Promise$all2 = _slicedToArray(_await$Promise$all, 3);\n          reqChannel = _await$Promise$all2[0];\n          reqSeries = _await$Promise$all2[1];\n          reqAudios = _await$Promise$all2[2];\n\n          if (!(reqChannel.status >= 404)) {\n            _context.next = 13;\n            break;\n          }\n\n          res.statusCode = reqChannel.status;\n          return _context.abrupt(\"return\", {\n            channel: null,\n            audioClips: null,\n            series: null,\n            statusCode: reqChannel.status\n          });\n\n        case 13:\n          _context.next = 15;\n          return _regeneratorRuntime.awrap(reqChannel.json());\n\n        case 15:\n          dataChannel = _context.sent;\n          channel = dataChannel.body.channel;\n          _context.next = 19;\n          return _regeneratorRuntime.awrap(reqAudios.json());\n\n        case 19:\n          dataAudios = _context.sent;\n          audioClips = dataAudios.body.audio_clips;\n          _context.next = 23;\n          return _regeneratorRuntime.awrap(reqSeries.json());\n\n        case 23:\n          dataSeries = _context.sent;\n          series = dataSeries.body.channels;\n          return _context.abrupt(\"return\", {\n            channel: channel,\n            audioClips: audioClips,\n            series: series,\n            statusCode: 200\n          });\n\n        case 28:\n          _context.prev = 28;\n          _context.t0 = _context[\"catch\"](2);\n          return _context.abrupt(\"return\", {\n            channel: null,\n            audioClips: null,\n            series: null,\n            statusCode: 503\n          });\n\n        case 31:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 28]], Promise);\n};\n\nexport default Channel;","map":{"version":3,"sources":["/home/andres/Projects/podcasts-nextjs/pages/channel.js"],"names":["React","useState","Error","Layout","ChannelGrid","PodcastList","Channel","props","channel","audioClips","series","statusCode","podcast","setPodcast","openPodcast","event","preventDefault","title","backgroundImage","urls","banner_image","original","length","getInitialProps","query","res","idChannel","id","Promise","all","fetch","reqChannel","reqSeries","reqAudios","status","json","dataChannel","body","dataAudios","audio_clips","dataSeries","channels"],"mappings":"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","sourcesContent":["import 'isomorphic-fetch';\nimport React, { useState } from 'react';\n\nimport Error from './_error';\nimport Layout from '../components/Layout';\nimport ChannelGrid from '../components/ChannelGrid';\nimport PodcastList from '../components/PodcastList';\n\nconst Channel = (props) => {\n  const { channel, audioClips, series, statusCode } = props;\n\n  const [podcast, setPodcast] = useState(null);\n\n  openPodcast = (event, podcast) => {\n    event.preventDefault();\n    setPodcast(podcast);\n  };\n\n  if (statusCode !== 200) {\n    return <Error statusCode={statusCode} />;\n  }\n\n  return (\n    <Layout title={channel.title}>\n      <div\n        className=\"banner\"\n        style={{\n          backgroundImage: `url(${channel.urls.banner_image.original})`,\n        }}\n      />\n\n      <h1>{channel.title}</h1>\n\n      {series.length > 0 && (\n        <div>\n          <h2>Series</h2>\n          <ChannelGrid channels={series} />\n        </div>\n      )}\n\n      <h2>Ultimos Podcasts</h2>\n      <PodcastList podcasts={audioClips} />\n\n      <style jsx>{`\n        .banner {\n          width: 100%;\n          padding-bottom: 25%;\n          background-position: 50% 50%;\n          background-size: cover;\n          background-color: #aaa;\n        }\n        h1 {\n          font-weight: 600;\n          padding: 15px;\n        }\n        h2 {\n          padding: 15px;\n          font-size: 1.2em;\n          font-weight: 600;\n          margin: 0;\n        }\n      `}</style>\n    </Layout>\n  );\n};\n\nChannel.getInitialProps = async ({ query, res }) => {\n  let idChannel = query.id;\n\n  try {\n    let [reqChannel, reqSeries, reqAudios] = await Promise.all([\n      fetch(`https://api.audioboom.com/channels/${idChannel}`),\n      fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`),\n      fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`),\n    ]);\n\n    if (reqChannel.status >= 404) {\n      res.statusCode = reqChannel.status;\n\n      return {\n        channel: null,\n        audioClips: null,\n        series: null,\n        statusCode: reqChannel.status,\n      };\n    }\n\n    let dataChannel = await reqChannel.json();\n    let channel = dataChannel.body.channel;\n\n    let dataAudios = await reqAudios.json();\n    let audioClips = dataAudios.body.audio_clips;\n\n    let dataSeries = await reqSeries.json();\n    let series = dataSeries.body.channels;\n\n    return { channel, audioClips, series, statusCode: 200 };\n  } catch (error) {\n    return { channel: null, audioClips: null, series: null, statusCode: 503 };\n  }\n};\n\nexport default Channel;\n"]},"metadata":{},"sourceType":"module"}