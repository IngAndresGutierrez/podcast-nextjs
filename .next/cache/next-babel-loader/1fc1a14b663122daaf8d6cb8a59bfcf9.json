{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/andres/Projects/podcasts-nextjs/pages/index.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport 'isomorphic-fetch';\nimport Error from 'next/error';\nimport ChannelGrid from '../components/ChannelGrid';\nimport Layout from '../components/Layout';\n\nvar Index = function Index(props) {\n  var channels = props.channels,\n      statusCode = props.statusCode;\n\n  if (statusCode !== 200) {\n    return __jsx(Error, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 12\n      }\n    }, \"Se rompi\\xF3 el server\");\n  }\n\n  return __jsx(Layout, {\n    title: \"Podcasts\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, __jsx(ChannelGrid, {\n    channels: channels,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }));\n};\n\nIndex.getInitialProps = function _callee() {\n  var req, _await$req$json, channels;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch('https://api.audioboom.com/channels/recommended'));\n\n        case 3:\n          req = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(req.json());\n\n        case 6:\n          _await$req$json = _context.sent;\n          channels = _await$req$json.body;\n          return _context.abrupt(\"return\", {\n            channels: channels,\n            statusCode: 200\n          });\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", {\n            channels: null,\n            statusCode: 500\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 11]], Promise);\n};\n\nexport default Index;","map":{"version":3,"sources":["/home/andres/Projects/podcasts-nextjs/pages/index.js"],"names":["Error","ChannelGrid","Layout","Index","props","channels","statusCode","getInitialProps","fetch","req","json","body"],"mappings":";;;;;;;AAAA,OAAO,kBAAP;AACA,OAAOA,KAAP,MAAkB,YAAlB;AAEA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAW;AAAA,MACfC,QADe,GACUD,KADV,CACfC,QADe;AAAA,MACLC,UADK,GACUF,KADV,CACLE,UADK;;AAGvB,MAAIA,UAAU,KAAK,GAAnB,EAAwB;AACtB,WAAO,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAP;AACD;;AAED,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAa,IAAA,QAAQ,EAAED,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAZD;;AAcAF,KAAK,CAACI,eAAN,GAAwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEJC,KAAK,CAAC,gDAAD,CAFD;;AAAA;AAEhBC,UAAAA,GAFgB;AAAA;AAAA,2CAGWA,GAAG,CAACC,IAAJ,EAHX;;AAAA;AAAA;AAGRL,UAAAA,QAHQ,mBAGdM,IAHc;AAAA,2CAIb;AAAEN,YAAAA,QAAQ,EAARA,QAAF;AAAYC,YAAAA,UAAU,EAAE;AAAxB,WAJa;;AAAA;AAAA;AAAA;AAAA,2CAMb;AAAED,YAAAA,QAAQ,EAAE,IAAZ;AAAkBC,YAAAA,UAAU,EAAE;AAA9B,WANa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAUA,eAAeH,KAAf","sourcesContent":["import 'isomorphic-fetch';\nimport Error from 'next/error';\n\nimport ChannelGrid from '../components/ChannelGrid';\nimport Layout from '../components/Layout';\n\nconst Index = (props) => {\n  const { channels, statusCode } = props;\n\n  if (statusCode !== 200) {\n    return <Error>Se rompi√≥ el server</Error>;\n  }\n\n  return (\n    <Layout title='Podcasts'>\n      <ChannelGrid channels={channels} />\n    </Layout>\n  );\n};\n\nIndex.getInitialProps = async () => {\n  try {\n    let req = await fetch('https://api.audioboom.com/channels/recommended');\n    let { body: channels } = await req.json();\n    return { channels, statusCode: 200 };\n  } catch (e) {\n    return { channels: null, statusCode: 500 };\n  }\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}